{"version":3,"sources":["components/AddStayForm.js","components/DaysOverview/KennelOverview.js","components/DaysOverview/KennelRowOverview.js","components/DaysOverview/DayOverview.js","components/DaysOverview/DaysOverview.js","App.js","reportWebVitals.js","reducers/counter.js","reducers/isLogged.js","reducers/index.js","index.js"],"names":["AddStayForm","passNewGroupStayUpScope","boilerplatePetDetails","useState","addStayFormStayState","setAddStayFormStayState","updateGroupState","e","target","name","value","updatePetState","newState","pets","getAttribute","className","onSubmit","preventDefault","htmlFor","required","id","type","minLength","groupName","onChange","groupNotes","Object","keys","map","petStayLabel","data-formkey","onClick","removePetStayInput","style","backgroundColor","padding","petName","arrivalDate","arrivalTime","releaseDate","releaseTime","kennelSize","notes","placeholder","newPetStayLabel","Math","ceil","length","random","console","log","KennelOverview","kennelReservation","kennelId","KennelRowOverview","kennelSizeReservations","kennelRowSize","DayOverview","reservationsForDay","sortedReservationsZZZ","kennelReservations","push","date","values","DaysOverview","reservations","App","dateReservations","setDateReservations","groupStays","setGroupStays","errorLog","setErrorLog","proccessPetErrorState","formatDateString","dateString","newDate","Date","replace","undefined","getFullYear","getMonth","getDate","findFirstMissingNumber","sortedList","index","x","maxAllowedValue","createPetReservationForDate","petStay","kennelIdToReserve","workingDay","arrivalDay","releaseDay","allDayStay","arrivingToday","releasingToday","newPetReservationForDate","createReservationsForDate","sizesBoilerplate","settings","kennelSizes","size","total","emptyDateKennelSizesBoilerplate","addPetReservationToDate","workingReservationsState","newDateState","successStatus","workingDateReservationsObject","kennelSizeNeeded","maxReservationsOfSize","kennelReservationsOfSize","filter","reservation","errorObj","getFirstAvailableIdOfKennelSize","kennelIdsReserved","reservationsOfSize","successCheck","processNewPet","newPet","newDates","datesForStay","onEndDay","i","setDate","generateDatesFromPet","newReservations","dateKey","stlye","JSON","stringify","newGroup","obj","newReservationsState","petKey","groupStay","newGroupState","groupIsDuplicate","newGroupLabel","addGroupToGroupStays","newNewState","sortedReservationsState","sort","a","b","reduce","result","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","counterReducer","state","action","payload","loggedReducer","allReducers","combineReducers","counter","logged","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c04ec6b0.chunk.js","sourcesContent":["import {useState} from 'react';\r\n\r\nconst AddStayForm = ({passNewGroupStayUpScope}) => {\r\n    const boilerplatePetDetails = {\r\n        // \"formKey\": 1,2,3..\r\n        \"petName\": \"Mr. Kitty\",\r\n        \"kennelSize\": 'medium',\r\n        \"notes\":'note note note',\r\n        \"arrivalDate\": '2021-03-16',\r\n        \"arrivalTime\": '17:00',\r\n        \"releaseDate\": '2021-03-19',\r\n        \"releaseTime\": '17:00',\r\n        \"singleDayStay\": false\r\n    }\r\n    const [addStayFormStayState, setAddStayFormStayState] = useState({\r\n        \"groupName\": \"Smith\",\r\n        \"groupNotes\": \"Here's some notes\",\r\n        \"pets\":{\r\n            \"1\":{\r\n                \"formKey\": 1,\r\n                \"groupName\": \"Smith\",\r\n                ...boilerplatePetDetails\r\n            },\r\n        }\r\n    })\r\n    const updateGroupState = (e)=>{\r\n        setAddStayFormStayState({ ...addStayFormStayState, [e.target.name]: e.target.value})\r\n    }\r\n    const updatePetState = (e)=>{\r\n        let newState = { ...addStayFormStayState};\r\n        newState.pets[e.target.getAttribute('data-formkey')] = {...newState.pets[e.target.getAttribute('data-formKey')], [e.target.name]:e.target.value }\r\n        setAddStayFormStayState(newState);\r\n    }\r\n\r\n    const increasePetStayInputs = ()=>{\r\n        let newState = { ...addStayFormStayState};\r\n        let newPetStayLabel = Math.ceil((Object.keys(newState.pets).length * 2) * Math.random() * 1000);\r\n        newState.pets[newPetStayLabel] = {\"formKey\":newPetStayLabel , ...boilerplatePetDetails}\r\n        setAddStayFormStayState(newState);\r\n    }\r\n    const removePetStayInput = (e)=>{\r\n        let newState = { ...addStayFormStayState};\r\n        delete newState.pets[e.target.getAttribute('data-formkey')];\r\n        setAddStayFormStayState(newState);\r\n    }\r\n    const addStaySubmitHandler = (e)=>{\r\n        e.preventDefault();\r\n        console.log('addForm is passing up:', addStayFormStayState);\r\n        passNewGroupStayUpScope(addStayFormStayState);\r\n    }\r\n\r\n    return (\r\n        <form className=\"addStayForm_container\" onSubmit={(e)=>e.preventDefault()}>\r\n            <h1>Add Stay</h1>\r\n            \r\n            <div className=\"addStayForm_groupInfo-container\">\r\n                <div className=\"addStayForm_inputWrapper\">\r\n                    <label htmlFor=\"addStay-groupName\">Group Name</label>\r\n                    <input required id=\"addStay-groupName\" type=\"text\" minLength=\"4\" name=\"groupName\" value={addStayFormStayState.groupName} onChange={(e)=> updateGroupState(e) } />\r\n                </div>\r\n\r\n                <div className=\"addStayForm_inputWrapper\">\r\n                    <label htmlFor=\"addStay-groupNotes\">Group Notes</label>\r\n                    <textarea required id=\"addStay-groupNotes\" type=\"text\" minLength=\"4\" name=\"groupNotes\" value={addStayFormStayState.groupNotes} onChange={(e)=> updateGroupState(e) } />\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"addStayForm_addPetForms-container\">\r\n\r\n                {Object.keys(addStayFormStayState.pets).map((petStayLabel)=>{\r\n\r\n                    {/* {console.log('petStay is : ', addStayFormStayState.pets[petStayLabel])} */}\r\n                    return <div key={petStayLabel} className=\"addStayForm_petStay-container\">\r\n\r\n                    <button data-formkey={petStayLabel} onClick={(e)=>{removePetStayInput(e)}} style={{backgroundColor:\"hsl(0,100%,80%)\", padding:\"0.5em\"}} >Remove</button>\r\n\r\n                        <div className=\"addStayForm_inputWrapper\">\r\n                            <label htmlFor=\"addStay-petName\">Pet Name</label>\r\n                            <input required name=\"petName\" data-formkey={petStayLabel} type=\"text\" minLength=\"2\" value={addStayFormStayState.pets[petStayLabel].petName} onChange={(e)=> updatePetState(e)} />\r\n                        </div>\r\n\r\n                        <div className=\"addStayForm_inputWrapper\">\r\n                            <label htmlFor=\"addStay-arrivalDate\">Arrival Date</label>\r\n                            <input required name=\"arrivalDate\" data-formkey={petStayLabel} type=\"date\" data-formkey={petStayLabel} value={addStayFormStayState.pets[petStayLabel].arrivalDate} onChange={(e)=> updatePetState(e)} />\r\n\r\n                            <label htmlFor=\"addStay-arrivalTime\">Arrival Time</label>\r\n                            <input required name=\"arrivalTime\" data-formkey={petStayLabel} type=\"time\" data-formkey={petStayLabel} value={addStayFormStayState.pets[petStayLabel].arrivalTime} onChange={(e)=> updatePetState(e)} />\r\n                        </div>\r\n                        <br />\r\n\r\n                        <div className=\"addStayForm_inputWrapper\">\r\n                            <label htmlFor=\"releaseDate\">Release Date</label>\r\n                            <input required name=\"releaseDate\" data-formkey={petStayLabel} type=\"date\" value={addStayFormStayState.pets[petStayLabel].releaseDate} onChange={(e)=> updatePetState(e)}  />\r\n\r\n                            <label htmlFor=\"releaseTime\">Release Time</label>\r\n                            <input required name=\"releaseTime\" data-formkey={petStayLabel} type=\"time\" value={addStayFormStayState.pets[petStayLabel].releaseTime} onChange={(e)=> updatePetState(e)} />\r\n                        </div>\r\n                        <br />\r\n\r\n                        <div className=\"addStayForm_inputWrapper\">\r\n                            <label htmlFor=\"addStay-kennelSize\">Kennel Size</label>\r\n                            <br />\r\n                            <select required name=\"kennelSize\"  data-formkey={petStayLabel} value={addStayFormStayState.pets[petStayLabel].kennelSize} onChange={(e)=> updatePetState(e)} >\r\n                                <option value=\"small\">Small</option>\r\n                                <option value=\"medium\">Medium</option>\r\n                                <option value=\"large\">Large</option>\r\n                            </select>\r\n                        </div>\r\n\r\n\r\n                        <div className=\"addStayForm_inputWrapper\">\r\n                            <label htmlFor=\"addStay-petNotes\">Pet Notes</label>\r\n                            <br />\r\n                            <textarea  name=\"notes\" data-formkey={petStayLabel} value={addStayFormStayState.pets[petStayLabel].notes} onChange={(e)=> updatePetState(e)} placeholder=\"Notes, medical or otherwise\" />\r\n                        </div>\r\n                        <hr />\r\n                        \r\n\r\n\r\n                    </div>\r\n                    {/* /petStay form wrapper */}\r\n                })}\r\n            </div>\r\n            <div className=\"addStayForm_addAnotherPet-container\">\r\n                <button onClick={increasePetStayInputs}>Add Another Pet</button>\r\n                <button onClick={addStaySubmitHandler}>Submit</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AddStayForm\r\n","\r\nconst KennelOverview = ({kennelReservation}) => {\r\n    return (\r\n        <div className=\"kennelOverview\">\r\n            {/* <p>Kennel: {kennelReservation.kennelId}</p>\r\n            <p>Group:{kennelReservation.groupName}</p>\r\n            <p>Pet:{kennelReservation.petName}</p> */}\r\n            <p>{kennelReservation.kennelId}.) {kennelReservation.petName}</p>\r\n            {/* <p>Notes:{kennelReservation.notes}</p> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KennelOverview\r\n","import KennelOverview from \"./KennelOverview\";\r\n\r\nconst KennelRowOverview = ({kennelSizeReservations}) => {\r\n    // console.log(kennelSizeReservations[0].kennelSize, kennelSizeReservations);\r\n    const kennelRowSize = kennelSizeReservations[0].kennelSize;\r\n    return (\r\n        <div className={\"kennelRow kennelRow-\" + kennelRowSize}>\r\n            <h3>Row Size: {kennelRowSize}</h3>\r\n                {kennelSizeReservations.map((kennelReservation)=>{\r\n                    return (\r\n                            <div >\r\n                                <KennelOverview key={kennelReservation.kennelId} kennelReservation={kennelReservation} />\r\n                            </div>\r\n                        )\r\n                })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KennelRowOverview\r\n","import KennelRowOverview from './KennelRowOverview';\r\n\r\nconst DayOverview = ({reservationsForDay}) => {\r\n    // console.log('day here', reservationsForDay);\r\n\r\n    let sortedReservationsZZZ ={};\r\n    // sortedReservations.map((kennelReservation)=>{\r\n    reservationsForDay.kennelReservations.map((kennelReservation)=>{\r\n        if( sortedReservationsZZZ[kennelReservation.kennelSize]){\r\n            sortedReservationsZZZ[kennelReservation.kennelSize].push(kennelReservation);\r\n        }else{\r\n            sortedReservationsZZZ[kennelReservation.kennelSize] = [kennelReservation];\r\n        }\r\n    });\r\n    \r\n\r\n    // console.log( 'SORTED RESERVATIONS ',sortedReservations);\r\n    // console.log( 'SORTED RESERVATIONSZZZ ',sortedReservationsZZZ);\r\n    return (\r\n        <div>\r\n            <hr></hr>\r\n            <br />\r\n            <h2>Date: {reservationsForDay.date}</h2>\r\n            \r\n\r\n            {Object.values(sortedReservationsZZZ).map((kennelSizeReservations)=>{\r\n                return <KennelRowOverview key={kennelSizeReservations.kennelSize} kennelSizeReservations={kennelSizeReservations} />\r\n            })}\r\n\r\n\r\n            {/* <pre>{JSON.stringify(reservationsForDay, null, 2)}</pre> */}\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DayOverview\r\n","import DayOverview from './DayOverview';\r\n\r\nconst DaysOverview = ({reservations}) => {\r\n    // console.log('days here', reservations);\r\n\r\n    // const reservationsArray = Object.values(reservations);\r\n    // console.log(reservationsArray);\r\n\r\n    return (\r\n        <div className=\"dayOverview_container\">\r\n            <h1>Days:</h1>\r\n            {Object.values(reservations).map((reservationsForDay)=>{ \r\n                return <DayOverview key={reservationsForDay.date} reservationsForDay={reservationsForDay} /> \r\n            })}\r\n            {/* <h1>_________________JSON_____________________</h1>\r\n            <pre>{JSON.stringify(reservations, null, 2)}</pre> */}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DaysOverview\r\n","import {useState} from 'react';\r\nimport AddStayForm from './components/AddStayForm';\r\nimport DaysOverview from './components/DaysOverview/DaysOverview';\r\nimport CurrentStayInfo from './components/CurrentStayInfo';\r\n\r\n// // Mock Database\r\nimport settings from './mockDbSettings.json';\r\n// import stays from './mockDbStays.json';\r\n// // import reservations from './mockDbReservations.json'\r\n// import reservations from './mockDbReservations_empty.json'\r\n\r\n\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {increment, decrement} from './actions/index'\r\n\r\nfunction App() {\r\n  const emptyDateKennelSizesBoilerplate= ()=>{\r\n    let sizesBoilerplate = {}\r\n    settings.kennelSizes.map((size)=>{\r\n      sizesBoilerplate[size.size + 'Total'] = size.total;\r\n      sizesBoilerplate[size.size + 'Available'] = true;\r\n    })\r\n    return sizesBoilerplate;\r\n  }\r\n\r\n  const [currentStayDetails, setCurrentStayDetails] = useState({\r\n    \"groupName\":\"useState groupName outer\",\r\n    \"groupNotes\":\"Some group notes\",\r\n    \"pets\":[\r\n      {\r\n        \"groupName\":\"useState groupName inner\",\r\n        \"petName\":\"useState Mr. Kitty\",\r\n        \"kennelSize\":\"medium\",\r\n        \"arrivalDate\":\"\",\r\n        \"arrivalTime\":\"09:15\",\r\n        \"releaseDate\":\"\",\r\n        \"releaseTime\":\"17:00\",\r\n        \"notes\":\"Her name is Mr. Kitty\"\r\n      }\r\n    ]\r\n  });\r\n\r\n  const [dateReservations, setDateReservations] = useState({});\r\n  const [groupStays, setGroupStays] = useState({})\r\n  const [errorLog, setErrorLog] = useState({})\r\n  let proccessPetErrorState = {} // Tried using a useState for this, but it's async and didn't keep with the unblocked functions\r\n\r\n  const addGroupToGroupStays = (groupStay)=>{\r\n    let newGroupState = groupStays;\r\n    let [groupIsDuplicate, i] = [true, 1];\r\n    let newGroupLabel = groupStay.groupName + '-' + i;\r\n    while(groupIsDuplicate === true && i < 99){\r\n      if(! groupStays[newGroupLabel]){ // if group is NOT already in db\r\n        groupIsDuplicate = false\r\n      }else {newGroupLabel = groupStay.groupName + '-' + i;}\r\n      i++;\r\n    }\r\n    if(i > 50){console.log('addGroupToGroupStays while loop overflow!!!!', i);}\r\n    newGroupState[newGroupLabel] = groupStay;\r\n    console.log('label for group is : ', newGroupLabel)\r\n    setGroupStays(newGroupState);\r\n  }\r\n\r\n  const formatDateString = (dateString)=>{\r\n    // console.log('formate Date is receiving', typeof(dateString),dateString);\r\n    let [newDate, formattedDateString] = ['', ''];\r\n    if(typeof(dateString) == 'string'){\r\n      newDate = new Date(dateString.replace(/-/g, '/'));\r\n    } else if(typeof(dateString) == 'object'){\r\n      newDate = dateString.date;\r\n      if(newDate === undefined){ // if receiving an object without a date property it must already be a date object\r\n        newDate = dateString;\r\n      }\r\n    }\r\n    formattedDateString = newDate.getFullYear() + '/' + ( newDate.getMonth() + 1 ) + '/' + newDate.getDate();\r\n    // console.log('formatDateString is returning : ', typeof(formattedDateString), formattedDateString);\r\n    return formattedDateString;\r\n  }\r\n\r\n  const findFirstMissingNumber = (sortedList, index, x, maxAllowedValue)=>{\r\n    if(sortedList[index] == x && x < maxAllowedValue){\r\n      return findFirstMissingNumber(sortedList, (index+1), (x+1), maxAllowedValue);\r\n    }else{ return x; }\r\n  }\r\n\r\n  const generateDatesFromPet = (petStay)=>{\r\n    // console.log('generateDatesFromPet is receiving : ', petStay);\r\n    let datesForStay = {};\r\n    let [workingDay, releaseDay] = [new Date(formatDateString(petStay.arrivalDate)), new Date(formatDateString(petStay.releaseDate))];\r\n    let [onEndDay, i] = [false, 0];\r\n    while(onEndDay === false){\r\n      // console.log('looping through adding days', workingDay, releaseDay);\r\n      // we CANNOT use the == operator an object! it will always return false\r\n      if(releaseDay >= workingDay && releaseDay <= workingDay) { \r\n        // console.log('working day is release day');\r\n        onEndDay = true;\r\n      }\r\n      datesForStay[formatDateString(workingDay)] = {\"date\": formatDateString(workingDay)};\r\n      workingDay.setDate(workingDay.getDate() + 1); //increment date counter\r\n      i++; //increment backup dev counter\r\n      if(i > 12){ onEndDay = true; console.log('generateDatesFromPet while loop overflow!!!');}\r\n    }\r\n    // console.log('datesForStay : ', datesForStay);\r\n    return datesForStay;\r\n  }\r\n  const createPetReservationForDate = (dateString, petStay, kennelIdToReserve)=>{\r\n    // console.log('createPetReservationForDate is receiving : ', dateString, petStay);\r\n    let [arrivalTime, releaseTime] = [petStay.arrivalTime, petStay.releaseTime];\r\n    let [workingDay, arrivalDay, releaseDay] = [new Date(dateString), new Date(formatDateString(petStay.arrivalDate)), new Date(formatDateString(petStay.releaseDate))];\r\n    let [allDayStay, arrivingToday, releasingToday] = [false, false, false];\r\n    // we CANNOT use the == operator an object! it will always return false\r\n    if( arrivalDay >= workingDay && arrivalDay <= workingDay ) { // if arrival is the working day \r\n      arrivingToday = true;\r\n      releaseTime = '';\r\n    } else if(releaseDay >= workingDay && releaseDay <= workingDay) { // if release is the working day \r\n      releasingToday = true;\r\n      arrivalTime = '';\r\n    } else{ // not arriving or leaving, so must be here all day\r\n      allDayStay = true;\r\n    }\r\n    const newPetReservationForDate = {\r\n          \"kennelId\": kennelIdToReserve,\r\n          \"kennelSize\": petStay.kennelSize,\r\n          \"groupName\": petStay.groupName,\r\n          \"petName\": petStay.petName,\r\n          \"allDayStay\": allDayStay,\r\n          \"arrivingToday\":arrivingToday,\r\n          \"releasingToday\":releasingToday,\r\n          \"arrivalTime\": petStay.arrivalTime,\r\n          \"releaseTime\": petStay.releaseTime,\r\n          \"notes\": petStay.notes\r\n    };\r\n    console.log('createPetReservationForDate is returning : ' , newPetReservationForDate);\r\n    return newPetReservationForDate;\r\n  }\r\n\r\n  const getFirstAvailableIdOfKennelSize = (workingDateReservationsObject, kennelSizeNeeded)=>{\r\n    // console.log('getFirstAvailable is working with state :', workingDateReservationsObject);\r\n    const maxReservationsOfSize = workingDateReservationsObject[kennelSizeNeeded + 'Total'];\r\n    const kennelReservationsOfSize = workingDateReservationsObject.kennelReservations.filter( reservation => reservation.kennelSize == kennelSizeNeeded );\r\n    // console.log('Available : ', maxReservationsOfSize,'Taken : ', kennelReservationsOfSize.length);\r\n    if(maxReservationsOfSize <= kennelReservationsOfSize.length){\r\n      \r\n      let errorObj = {}\r\n      if(proccessPetErrorState.getFirstAvailableIdOfKennelSize){\r\n        errorObj = {...proccessPetErrorState, \"getFirstAvailableIdOfKennelSize\": [ ...proccessPetErrorState.getFirstAvailableIdOfKennelSize,`Kennel size ${kennelSizeNeeded} is full on ${workingDateReservationsObject.date}`]}\r\n      }else{\r\n        errorObj = {...proccessPetErrorState, \"getFirstAvailableIdOfKennelSize\": [ `Kennel size ${kennelSizeNeeded} is full on ${workingDateReservationsObject.date}`]}\r\n      }\r\n      proccessPetErrorState = errorObj\r\n      \r\n      return false;\r\n    }else{\r\n      let kennelIdsReserved = [];\r\n      kennelReservationsOfSize.map((reservationsOfSize)=>{ // loop through taken kennels and store ID to find lowest\r\n        kennelIdsReserved.push(reservationsOfSize.kennelId);\r\n      });\r\n      if(kennelIdsReserved.length == 0){kennelIdsReserved.push(0)}\r\n      // console.log('reserved Ids : ', kennelIdsReserved);\r\n      let idToReserve = findFirstMissingNumber(kennelIdsReserved, 0, 1, maxReservationsOfSize);\r\n      // console.log('next Id to reserve is: ', idToReserve);\r\n      return idToReserve;\r\n    }\r\n  }\r\n\r\n  const createReservationsForDate = (dateString, petStay)=>{\r\n    const newPetReservationForDate = createPetReservationForDate(dateString, petStay, 1);\r\n    const newReservationsDate = {\r\n      \"date\": dateString,\r\n      ...emptyDateKennelSizesBoilerplate(),\r\n      \"kennelReservations\":[ newPetReservationForDate ]\r\n    };\r\n    // console.log('createReservationsForDate is returning : ', newReservationsDate);\r\n    return newReservationsDate;\r\n  }\r\n\r\n\r\n  const addPetReservationToDate = (dateString, petStay, workingReservationsState)=>{// :::FOR EACH DATE IN RANGE\r\n    // console.log('addPetReservationToDate is receiving : ' , dateString, petStay);\r\n    let newDateState = {};\r\n    let successStatus = true;\r\n\r\n    if(workingReservationsState[dateString]){ // :::CHECK FOR DATE IN RESERVATIONS\r\n      // console.log('addPetReservationToDate found day :', workingReservationsState[dateString]);\r\n      newDateState = workingReservationsState[dateString];\r\n      const kennelIdToReserve = getFirstAvailableIdOfKennelSize(workingReservationsState[dateString], petStay.kennelSize, workingReservationsState);\r\n      if(kennelIdToReserve === false){\r\n        proccessPetErrorState = {...proccessPetErrorState, \"addPetReservationToDate\":`kennelIdToReserve = createPetReservationForDate() didn't resolve: ${kennelIdToReserve}`}\r\n        successStatus = false;\r\n        return false;\r\n      }\r\n\r\n      const successCheck = createPetReservationForDate(dateString, petStay, kennelIdToReserve);\r\n      if(successCheck === true){\r\n        proccessPetErrorState = {...proccessPetErrorState, \"addPetReservationToDate\":`successCheck = getFirstAvailableIdOfKennelSize() didn't resolve: ${successCheck}`};\r\n        return false;\r\n      }\r\n      \r\n      // console.log('about to push:', successCheck,' to : ', newDateState);\r\n      newDateState.kennelReservations.push(successCheck);\r\n      \r\n    }else{ // :::CREATE DATE IN RESERVATIONS\r\n      \r\n      const successCheck = createReservationsForDate(dateString, petStay, workingReservationsState);\r\n      if(successCheck === false){\r\n        console.log('SUCCESS CHECK NOT MET IN addPetReservationToDate, successCheck: ', successCheck);\r\n        successStatus = false;\r\n          proccessPetErrorState = {...proccessPetErrorState, \"addPetReservationToDate\":`successCheck = createReservationsForDate() didn't resolve: ${successCheck}`}\r\n          \r\n        return false;\r\n      }else{\r\n        newDateState = successCheck;\r\n      }\r\n\r\n    }\r\n\r\n    if(successStatus !== false){\r\n      console.log('addPetReservationToDate successStatus: ', successStatus, 'passing on: ', newDateState);\r\n      return newDateState;\r\n    } else{\r\n      console.log('addPetReservationToDate falied. successStatus: ', successStatus);\r\n      \r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n  const processNewPet = (newPet, workingReservationsState)=>{\r\n    // console.log('processNewPet is receiving', newPet);\r\n    let newDates = generateDatesFromPet(newPet); // :::GENERATE RANGE OF DATES\r\n    let [newReservations, successStatus] = [{}, true];\r\n    // console.log('processNewPet is about to loop over : ', newDates);\r\n    Object.keys(newDates).map((dateKey)=>{ // :::FOR EACH DATE IN RANGE\r\n      // console.log('looping through date : ', dateKey,newDates[dateKey]);\r\n      let successCheck = addPetReservationToDate(dateKey, newPet, workingReservationsState);\r\n      if(successCheck === false){\r\n        console.log('SUCCESS CHECK NOT MET IN processNewPet, successCheck: ', successCheck);\r\n        successStatus = false;\r\n        proccessPetErrorState = {...proccessPetErrorState, \"processNewPet\":`successCheck = addPetReservationToDate() didn't resolve: ${successCheck}`}\r\n          return false;\r\n        // return workingReservationsState;\r\n      } else{\r\n        newReservations[dateKey] = successCheck;\r\n      }\r\n    })\r\n    if(successStatus !== false){\r\n      console.log('processNewPet is returning', newReservations);\r\n      return newReservations;\r\n      // return orderKennelReservationsArrayBySize(newReservations);\r\n    }else{\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const newGroupStayHandler = (newGroup) =>{\r\n    // console.log('newGroupHandler is receiving : ', newGroup);\r\n    let newReservationsState = dateReservations;\r\n    let successStatus = '';\r\n    proccessPetErrorState = {}\r\n\r\n    Object.keys(newGroup.pets).map((petKey)=>{ // :::FOR EACH PET\r\n      // console.log('pet in group is: ', newGroup.pets[petKey].petName);\r\n      const successCheck = processNewPet(newGroup.pets[petKey], newReservationsState);\r\n      if(successCheck == false){\r\n        console.log('SUCCESS CHECK NOT MET IN newGroupStayHandler , successCheck: ', successCheck);\r\n        proccessPetErrorState = {...proccessPetErrorState, \"newGroupStayHandler\":`successCheck = processNewPet() didn't resolve: ${successCheck}`};\r\n        successStatus = false\r\n      } else{\r\n        newReservationsState = successCheck;\r\n        successStatus = true;\r\n      }\r\n    });\r\n\r\n    if(successStatus === true){\r\n      console.log('Updating STATE with: ', newReservationsState, successStatus);\r\n      proccessPetErrorState = {'reset':'successful update'}\r\n      addGroupToGroupStays(newGroup);\r\n      const newNewState = {...dateReservations, ...newReservationsState};\r\n      const sortedReservationsState = sortDateObject(newNewState);\r\n      // console.log('newNewState is : ', sortedReservationsState);\r\n      console.log('sortedReservationsState is : ', sortedReservationsState);\r\n      setDateReservations(sortedReservationsState);\r\n      // setDateReservations(newNewState);\r\n    }else{\r\n      // alert('something went wrong');\r\n      console.log('proccessPetErrorState at FAIL :', proccessPetErrorState);\r\n      // alert( JSON.stringify(proccessPetErrorState, null, 2) );\r\n      \r\n    }\r\n    setErrorLog(proccessPetErrorState)\r\n    console.log('-------------------------');\r\n    console.log('-------------------------');\r\n  }\r\n\r\n  // function sortObject(obj){ return Object.keys(obj).sort().reduce( (accumulator, key)=> accumulator[key] = obj[key] ,{})};\r\n  function sortObject(obj) {\r\n    return Object.keys(obj).sort().reduce( \r\n      (result, key)=> {\r\n        result[key] = obj[key];\r\n        return result;\r\n      },\r\n    {});\r\n  }\r\n  //V Will sort according to how they sizes are ordered in the settings\r\n  function orderKennelReservationsArrayBySize(reservationsArr) {\r\n    console.log('Sorted KennelSizes receiving', reservationsArr);\r\n    let sortedSizesObject = {};\r\n    settings.kennelSizes.forEach(\r\n      (kennelSizeSetting)=>{sortedSizesObject[kennelSizeSetting.size] = []} \r\n    );\r\n    // reservationsArr.forEach((reservationForDay)=>{sortedSizesObject[reservationForDay.kennelSize].push(reservationForDay)});\r\n    for( let reservationForDay in reservationsArr){\r\n      console.log( 'RESERVATIONS SIZE',sortedSizesObject[ reservationsArr[reservationForDay].kennelSize ], reservationForDay)\r\n      sortedSizesObject[reservationForDay].kennelSize.push(reservationForDay)\r\n    }\r\n    //Should have and object in the form of {\"small\":[{},{}], \"medium\":[{},{}]...} for all sizes\r\n    let sortedArr = [];\r\n    for(let reservationsArrayOfSize in sortedSizesObject){\r\n      sortedArr.push(...reservationsArrayOfSize)\r\n    }\r\n    console.log('Sorted KennelSizes returning', sortedArr);\r\n    return sortedArr;\r\n  }\r\n  function sortDateObject(obj) {\r\n    return  Object.keys(obj).sort(\r\n      (a,b)=>{return new Date(a) - new Date(b);}\r\n    ).reduce( \r\n      (result, key)=> {\r\n        result[key] = obj[key];\r\n        return result;\r\n      },\r\n    {});\r\n  }\r\n\r\n  // const counter = useSelector(state => state.counter);\r\n  // const loggedIn = useSelector(state => state.logged);\r\n  // const dispatch = useDispatch();\r\n  return (\r\n    <div className=\"App\">\r\n    \r\n      {/* <div>\r\n        <h1>Counter = {counter}</h1>\r\n        <button onClick={()=>dispatch(increment(4))}>Increment</button>\r\n        <button onClick={()=>dispatch(decrement())}>Decrement</button>\r\n      </div> */}\r\n      {/* {loggedIn ? <h2>Logged in</h2> : <h2>Not logged in</h2>} */}\r\n      {settings.kennelSizes.map((size)=>{\r\n        return(\r\n          <p>{size.total} kennels available of size {size.size}</p>\r\n        )\r\n      })}\r\n      <hr />\r\n      <pre stlye=\"background-color:lightred\">{JSON.stringify(errorLog, null, 2)}</pre>\r\n      <hr />\r\n      {/* <pre>{JSON.stringify(sizesAvailable, null, 2)}</pre> */}\r\n    \r\n      {/* <button onClick={()=>console.log('GroupStays is : ', groupStays)}>log groupStays</button>\r\n      <button onClick={()=>console.log('Reservations State is : ', dateReservations)}>log Reservations</button> */}\r\n\r\n                                            {/* Maybe pass this into some kind of vaildation before setState() */}\r\n      <AddStayForm passNewGroupStayUpScope={newGroupStayHandler} />\r\n      <hr />\r\n\r\n      {/* <CurrentStayInfo currentStayDetails={currentStayDetails} /> */}\r\n      <DaysOverview reservations={dateReservations} />\r\n\r\n      \r\n    </div>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const increment = ()=>{return{type:'INCREMENT'}}\r\nconst decrement = ()=>{return{type:'DECREMENT'}}\r\n\r\nconst counterReducer = ( state= 0, action)=>{\r\n  switch(action.type){\r\n    case \"INCREMENT\":\r\n      return state + action.payload;\r\n    case \"DECREMENT\":\r\n      return state - 1;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default counterReducer","\r\nconst loggedReducer = (state = false, action)=>{\r\n  switch(action.type){\r\n    case 'SIGN_IN':\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default loggedReducer;\r\n","import counterReducer from './counter';\r\nimport loggedReducer from './isLogged';\r\n\r\nimport {combineReducers} from 'redux';\r\n\r\n\r\nconst allReducers = combineReducers({\r\n  // counterReducer, // ES6 sugar\r\n  counter: counterReducer,\r\n  // loggedReducer\r\n  logged: loggedReducer\r\n})\r\n\r\nexport default allReducers\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n//REDUX\r\nimport {createStore} from 'redux';\r\nimport allReducers from './reducers/index';\r\nimport {Provider} from 'react-redux';\r\n// let store = createStore(reducer);\r\n\r\nconst store = createStore(\r\n  allReducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}